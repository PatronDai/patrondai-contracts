/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CTokenStorageInterface extends Interface {
  functions: {
    accrualBlockNumber: TypedFunctionDescription<{ encode([]: []): string }>;

    admin: TypedFunctionDescription<{ encode([]: []): string }>;

    borrowIndex: TypedFunctionDescription<{ encode([]: []): string }>;

    comptroller: TypedFunctionDescription<{ encode([]: []): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    interestRateModel: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    pendingAdmin: TypedFunctionDescription<{ encode([]: []): string }>;

    reserveFactorMantissa: TypedFunctionDescription<{ encode([]: []): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalBorrows: TypedFunctionDescription<{ encode([]: []): string }>;

    totalReserves: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class CTokenStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CTokenStorage;
  attach(addressOrName: string): CTokenStorage;
  deployed(): Promise<CTokenStorage>;

  on(event: EventFilter | string, listener: Listener): CTokenStorage;
  once(event: EventFilter | string, listener: Listener): CTokenStorage;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CTokenStorage;
  removeAllListeners(eventName: EventFilter | string): CTokenStorage;
  removeListener(eventName: any, listener: Listener): CTokenStorage;

  interface: CTokenStorageInterface;

  functions: {
    accrualBlockNumber(): Promise<BigNumber>;

    admin(): Promise<string>;

    borrowIndex(): Promise<BigNumber>;

    comptroller(): Promise<string>;

    decimals(): Promise<number>;

    interestRateModel(): Promise<string>;

    name(): Promise<string>;

    pendingAdmin(): Promise<string>;

    reserveFactorMantissa(): Promise<BigNumber>;

    symbol(): Promise<string>;

    totalBorrows(): Promise<BigNumber>;

    totalReserves(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;
  };

  accrualBlockNumber(): Promise<BigNumber>;

  admin(): Promise<string>;

  borrowIndex(): Promise<BigNumber>;

  comptroller(): Promise<string>;

  decimals(): Promise<number>;

  interestRateModel(): Promise<string>;

  name(): Promise<string>;

  pendingAdmin(): Promise<string>;

  reserveFactorMantissa(): Promise<BigNumber>;

  symbol(): Promise<string>;

  totalBorrows(): Promise<BigNumber>;

  totalReserves(): Promise<BigNumber>;

  totalSupply(): Promise<BigNumber>;

  filters: {};

  estimate: {
    accrualBlockNumber(): Promise<BigNumber>;

    admin(): Promise<BigNumber>;

    borrowIndex(): Promise<BigNumber>;

    comptroller(): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    interestRateModel(): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    pendingAdmin(): Promise<BigNumber>;

    reserveFactorMantissa(): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    totalBorrows(): Promise<BigNumber>;

    totalReserves(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;
  };
}
