/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { PatronProxy } from "./PatronProxy";

export class PatronProxyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _owner: string,
    _daiTokenAddress: string,
    _uniswapAddress: string,
    _factoryAddress: string
  ): Promise<PatronProxy> {
    return super.deploy(
      _owner,
      _daiTokenAddress,
      _uniswapAddress,
      _factoryAddress
    ) as Promise<PatronProxy>;
  }
  getDeployTransaction(
    _owner: string,
    _daiTokenAddress: string,
    _uniswapAddress: string,
    _factoryAddress: string
  ): UnsignedTransaction {
    return super.getDeployTransaction(
      _owner,
      _daiTokenAddress,
      _uniswapAddress,
      _factoryAddress
    );
  }
  attach(address: string): PatronProxy {
    return super.attach(address) as PatronProxy;
  }
  connect(signer: Signer): PatronProxyFactory {
    return super.connect(signer) as PatronProxyFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PatronProxy {
    return new Contract(address, _abi, signerOrProvider) as PatronProxy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "_daiTokenAddress",
        type: "address"
      },
      {
        internalType: "address",
        name: "_uniswapAddress",
        type: "address"
      },
      {
        internalType: "address",
        name: "_factoryAddress",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256"
      }
    ],
    name: "calculateMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      },
      {
        internalType: "uint8",
        name: "_v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "_r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_s",
        type: "bytes32"
      }
    ],
    name: "forwardTx",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c3b380380610c3b8339818101604052608081101561003357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505060005a9050846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a815260200180610bc5604a913960600191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610c0f602c913960400191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632640f62c670de0b6b3a76400003a620186a05a870301028161030e57fe5b046040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561034357600080fd5b505afa158015610357573d6000803e3d6000fd5b505050506040513d602081101561036d57600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b505050506040513d602081101561045357600080fd5b81019080805190602001909291905050505050505050505061074b8061047a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806362dff8391461003b5780637173c7a1146100ff575b600080fd5b6100fd600480360360c081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561009857600080fd5b8201836020820111156100aa57600080fd5b803590602001918460018302840111640100000000831117156100cc57600080fd5b9091929391929390803560ff1690602001909291908035906020019092919080359060200190929190505050610222565b005b61020c600480360360a081101561011557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460018302840111640100000000831117156101b057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061060e565b6040518082815260200191505060405180910390f35b60005a90506000610283308a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061027e60016106c7565b61060e565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660018287878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561031a573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614610390576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806106ee6029913960400191505060405180910390fd5b6103df898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506106d5565b610451576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5472616e73616374696f6e206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632640f62c670de0b6b3a76400003a620186a05a88030102816104ab57fe5b046040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104e057600080fd5b505afa1580156104f4573d6000803e3d6000fd5b505050506040513d602081101561050a57600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505050506040513d60208110156105f057600080fd5b81019080805190602001909291905050505050505050505050505050565b6000858585858051906020012085604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018481526020018381526020018281526020019550505050505060405160208183030381529060405280519060200120905095945050505050565b600081600001549050919050565b600080600083516020850186885af19050939250505056fe506174726f6e50726f78793a3a666f72776172645478207369676e6174757265206d69736d61746368a265627a7a72315820bb49cc3fe65af6c7f7bbba711f0e16ba2e4e7afdde9499bf23213f7cbeffa7ed64736f6c63430005100032506174726f6e50726f78793a3a506174726f6e50726f7879206f6e6c79207468652070726f787920666163746f72792063616e20696e697469616c697a652061206e65772070726f7879506174726f6e50726f78793a3a506174726f6e50726f787920696e76616c696420696e697469616c697a6572";
