/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CErc20InterfaceInterface extends Interface {
  functions: {
    _addReserves: TypedFunctionDescription<{
      encode([addAmount]: [BigNumberish]): string;
    }>;

    borrow: TypedFunctionDescription<{
      encode([borrowAmount]: [BigNumberish]): string;
    }>;

    liquidateBorrow: TypedFunctionDescription<{
      encode([borrower, repayAmount, cTokenCollateral]: [
        string,
        BigNumberish,
        string
      ]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([mintAmount]: [BigNumberish]): string;
    }>;

    redeem: TypedFunctionDescription<{
      encode([redeemTokens]: [BigNumberish]): string;
    }>;

    redeemUnderlying: TypedFunctionDescription<{
      encode([redeemAmount]: [BigNumberish]): string;
    }>;

    repayBorrow: TypedFunctionDescription<{
      encode([repayAmount]: [BigNumberish]): string;
    }>;

    repayBorrowBehalf: TypedFunctionDescription<{
      encode([borrower, repayAmount]: [string, BigNumberish]): string;
    }>;

    underlying: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class CErc20Interface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CErc20Interface;
  attach(addressOrName: string): CErc20Interface;
  deployed(): Promise<CErc20Interface>;

  on(event: EventFilter | string, listener: Listener): CErc20Interface;
  once(event: EventFilter | string, listener: Listener): CErc20Interface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CErc20Interface;
  removeAllListeners(eventName: EventFilter | string): CErc20Interface;
  removeListener(eventName: any, listener: Listener): CErc20Interface;

  interface: CErc20InterfaceInterface;

  functions: {
    _addReserves(
      addAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      cTokenCollateral: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    underlying(): Promise<string>;
  };

  _addReserves(
    addAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  borrow(
    borrowAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  liquidateBorrow(
    borrower: string,
    repayAmount: BigNumberish,
    cTokenCollateral: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mint(
    mintAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  redeem(
    redeemTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    redeemAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  repayBorrow(
    repayAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  repayBorrowBehalf(
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  underlying(): Promise<string>;

  filters: {};

  estimate: {
    _addReserves(addAmount: BigNumberish): Promise<BigNumber>;

    borrow(borrowAmount: BigNumberish): Promise<BigNumber>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      cTokenCollateral: string
    ): Promise<BigNumber>;

    mint(mintAmount: BigNumberish): Promise<BigNumber>;

    redeem(redeemTokens: BigNumberish): Promise<BigNumber>;

    redeemUnderlying(redeemAmount: BigNumberish): Promise<BigNumber>;

    repayBorrow(repayAmount: BigNumberish): Promise<BigNumber>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish
    ): Promise<BigNumber>;

    underlying(): Promise<BigNumber>;
  };
}
