/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PatronDaiCampaignInterface extends Interface {
  functions: {
    _patrons: TypedFunctionDescription<{ encode([]: [string]): string }>;

    close: TypedFunctionDescription<{ encode([]: []): string }>;

    getCDaiAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getDaiAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getDaiRaised: TypedFunctionDescription<{ encode([]: []): string }>;

    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    getPatronCollateralBalance: TypedFunctionDescription<{
      encode([patron]: [string]): string;
    }>;

    getPatronDaiBalance: TypedFunctionDescription<{
      encode([patron]: [string]): string;
    }>;

    isClosed: TypedFunctionDescription<{ encode([]: []): string }>;

    stopSupporting: TypedFunctionDescription<{
      encode([withdrawnSupportingDaiAmount]: [BigNumberish]): string;
    }>;

    support: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;
  };

  events: {
    Closed: TypedEventDescription<{
      encodeTopics([raisedDai]: [null]): string[];
    }>;

    OwnerWithdraw: TypedEventDescription<{
      encodeTopics([amount]: [null]): string[];
    }>;

    PatronDeposit: TypedEventDescription<{
      encodeTopics([patron, amount]: [string | null, null]): string[];
    }>;

    PatronWithdraw: TypedEventDescription<{
      encodeTopics([patron, amount]: [string | null, null]): string[];
    }>;
  };
}

export class PatronDaiCampaign extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PatronDaiCampaign;
  attach(addressOrName: string): PatronDaiCampaign;
  deployed(): Promise<PatronDaiCampaign>;

  on(event: EventFilter | string, listener: Listener): PatronDaiCampaign;
  once(event: EventFilter | string, listener: Listener): PatronDaiCampaign;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PatronDaiCampaign;
  removeAllListeners(eventName: EventFilter | string): PatronDaiCampaign;
  removeListener(eventName: any, listener: Listener): PatronDaiCampaign;

  interface: PatronDaiCampaignInterface;

  functions: {
    _patrons(
      arg0: string
    ): Promise<{
      daiBalance: BigNumber;
      collateralBalance: BigNumber;
      lastCapitalization: BigNumber;
      capitalized: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    close(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    getCDaiAddress(): Promise<string>;

    getDaiAddress(): Promise<string>;

    getDaiRaised(): Promise<BigNumber>;

    getOwner(): Promise<string>;

    getPatronCollateralBalance(patron: string): Promise<BigNumber>;

    getPatronDaiBalance(patron: string): Promise<BigNumber>;

    isClosed(): Promise<boolean>;

    stopSupporting(
      withdrawnSupportingDaiAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    support(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  _patrons(
    arg0: string
  ): Promise<{
    daiBalance: BigNumber;
    collateralBalance: BigNumber;
    lastCapitalization: BigNumber;
    capitalized: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  close(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getCDaiAddress(): Promise<string>;

  getDaiAddress(): Promise<string>;

  getDaiRaised(): Promise<BigNumber>;

  getOwner(): Promise<string>;

  getPatronCollateralBalance(patron: string): Promise<BigNumber>;

  getPatronDaiBalance(patron: string): Promise<BigNumber>;

  isClosed(): Promise<boolean>;

  stopSupporting(
    withdrawnSupportingDaiAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  support(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Closed(raisedDai: null): EventFilter;

    OwnerWithdraw(amount: null): EventFilter;

    PatronDeposit(patron: string | null, amount: null): EventFilter;

    PatronWithdraw(patron: string | null, amount: null): EventFilter;
  };

  estimate: {
    _patrons(arg0: string): Promise<BigNumber>;

    close(): Promise<BigNumber>;

    getCDaiAddress(): Promise<BigNumber>;

    getDaiAddress(): Promise<BigNumber>;

    getDaiRaised(): Promise<BigNumber>;

    getOwner(): Promise<BigNumber>;

    getPatronCollateralBalance(patron: string): Promise<BigNumber>;

    getPatronDaiBalance(patron: string): Promise<BigNumber>;

    isClosed(): Promise<BigNumber>;

    stopSupporting(
      withdrawnSupportingDaiAmount: BigNumberish
    ): Promise<BigNumber>;

    support(amount: BigNumberish): Promise<BigNumber>;

    withdraw(amount: BigNumberish): Promise<BigNumber>;
  };
}
