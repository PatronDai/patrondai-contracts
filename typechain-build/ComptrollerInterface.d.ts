/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ComptrollerInterfaceInterface extends Interface {
  functions: {
    borrowAllowed: TypedFunctionDescription<{
      encode([cToken, borrower, borrowAmount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    borrowVerify: TypedFunctionDescription<{
      encode([cToken, borrower, borrowAmount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    enterMarkets: TypedFunctionDescription<{
      encode([cTokens]: [string[]]): string;
    }>;

    exitMarket: TypedFunctionDescription<{
      encode([cToken]: [string]): string;
    }>;

    isComptroller: TypedFunctionDescription<{ encode([]: []): string }>;

    liquidateBorrowAllowed: TypedFunctionDescription<{
      encode([
        cTokenBorrowed,
        cTokenCollateral,
        liquidator,
        borrower,
        repayAmount
      ]: [string, string, string, string, BigNumberish]): string;
    }>;

    liquidateBorrowVerify: TypedFunctionDescription<{
      encode([
        cTokenBorrowed,
        cTokenCollateral,
        liquidator,
        borrower,
        repayAmount,
        seizeTokens
      ]: [string, string, string, string, BigNumberish, BigNumberish]): string;
    }>;

    liquidateCalculateSeizeTokens: TypedFunctionDescription<{
      encode([cTokenBorrowed, cTokenCollateral, repayAmount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    mintAllowed: TypedFunctionDescription<{
      encode([cToken, minter, mintAmount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    mintVerify: TypedFunctionDescription<{
      encode([cToken, minter, mintAmount, mintTokens]: [
        string,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    redeemAllowed: TypedFunctionDescription<{
      encode([cToken, redeemer, redeemTokens]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    redeemVerify: TypedFunctionDescription<{
      encode([cToken, redeemer, redeemAmount, redeemTokens]: [
        string,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    repayBorrowAllowed: TypedFunctionDescription<{
      encode([cToken, payer, borrower, repayAmount]: [
        string,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    repayBorrowVerify: TypedFunctionDescription<{
      encode([cToken, payer, borrower, repayAmount, borrowerIndex]: [
        string,
        string,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    seizeAllowed: TypedFunctionDescription<{
      encode([
        cTokenCollateral,
        cTokenBorrowed,
        liquidator,
        borrower,
        seizeTokens
      ]: [string, string, string, string, BigNumberish]): string;
    }>;

    seizeVerify: TypedFunctionDescription<{
      encode([
        cTokenCollateral,
        cTokenBorrowed,
        liquidator,
        borrower,
        seizeTokens
      ]: [string, string, string, string, BigNumberish]): string;
    }>;

    transferAllowed: TypedFunctionDescription<{
      encode([cToken, src, dst, transferTokens]: [
        string,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    transferVerify: TypedFunctionDescription<{
      encode([cToken, src, dst, transferTokens]: [
        string,
        string,
        string,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class ComptrollerInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ComptrollerInterface;
  attach(addressOrName: string): ComptrollerInterface;
  deployed(): Promise<ComptrollerInterface>;

  on(event: EventFilter | string, listener: Listener): ComptrollerInterface;
  once(event: EventFilter | string, listener: Listener): ComptrollerInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ComptrollerInterface;
  removeAllListeners(eventName: EventFilter | string): ComptrollerInterface;
  removeListener(eventName: any, listener: Listener): ComptrollerInterface;

  interface: ComptrollerInterfaceInterface;

  functions: {
    borrowAllowed(
      cToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    borrowVerify(
      cToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enterMarkets(
      cTokens: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitMarket(
      cToken: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isComptroller(): Promise<boolean>;

    liquidateBorrowAllowed(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      repayAmount: BigNumberish
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    mintAllowed(
      cToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mintVerify(
      cToken: string,
      minter: string,
      mintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    redeemAllowed(
      cToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    redeemVerify(
      cToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    seizeAllowed(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    seizeVerify(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferAllowed(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferVerify(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  borrowAllowed(
    cToken: string,
    borrower: string,
    borrowAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  borrowVerify(
    cToken: string,
    borrower: string,
    borrowAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enterMarkets(
    cTokens: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitMarket(
    cToken: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isComptroller(): Promise<boolean>;

  liquidateBorrowAllowed(
    cTokenBorrowed: string,
    cTokenCollateral: string,
    liquidator: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    cTokenBorrowed: string,
    cTokenCollateral: string,
    liquidator: string,
    borrower: string,
    repayAmount: BigNumberish,
    seizeTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: string,
    cTokenCollateral: string,
    repayAmount: BigNumberish
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  mintAllowed(
    cToken: string,
    minter: string,
    mintAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mintVerify(
    cToken: string,
    minter: string,
    mintAmount: BigNumberish,
    mintTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  redeemAllowed(
    cToken: string,
    redeemer: string,
    redeemTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  redeemVerify(
    cToken: string,
    redeemer: string,
    redeemAmount: BigNumberish,
    redeemTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    cToken: string,
    payer: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    cToken: string,
    payer: string,
    borrower: string,
    repayAmount: BigNumberish,
    borrowerIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  seizeAllowed(
    cTokenCollateral: string,
    cTokenBorrowed: string,
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  seizeVerify(
    cTokenCollateral: string,
    cTokenBorrowed: string,
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferAllowed(
    cToken: string,
    src: string,
    dst: string,
    transferTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferVerify(
    cToken: string,
    src: string,
    dst: string,
    transferTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    borrowAllowed(
      cToken: string,
      borrower: string,
      borrowAmount: BigNumberish
    ): Promise<BigNumber>;

    borrowVerify(
      cToken: string,
      borrower: string,
      borrowAmount: BigNumberish
    ): Promise<BigNumber>;

    enterMarkets(cTokens: string[]): Promise<BigNumber>;

    exitMarket(cToken: string): Promise<BigNumber>;

    isComptroller(): Promise<BigNumber>;

    liquidateBorrowAllowed(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      seizeTokens: BigNumberish
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      repayAmount: BigNumberish
    ): Promise<BigNumber>;

    mintAllowed(
      cToken: string,
      minter: string,
      mintAmount: BigNumberish
    ): Promise<BigNumber>;

    mintVerify(
      cToken: string,
      minter: string,
      mintAmount: BigNumberish,
      mintTokens: BigNumberish
    ): Promise<BigNumber>;

    redeemAllowed(
      cToken: string,
      redeemer: string,
      redeemTokens: BigNumberish
    ): Promise<BigNumber>;

    redeemVerify(
      cToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish
    ): Promise<BigNumber>;

    repayBorrowVerify(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      borrowerIndex: BigNumberish
    ): Promise<BigNumber>;

    seizeAllowed(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish
    ): Promise<BigNumber>;

    seizeVerify(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish
    ): Promise<BigNumber>;

    transferAllowed(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish
    ): Promise<BigNumber>;

    transferVerify(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish
    ): Promise<BigNumber>;
  };
}
