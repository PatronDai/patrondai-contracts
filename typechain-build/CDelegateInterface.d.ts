/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CDelegateInterfaceInterface extends Interface {
  functions: {
    _becomeImplementation: TypedFunctionDescription<{
      encode([data]: [Arrayish]): string;
    }>;

    _resignImplementation: TypedFunctionDescription<{ encode([]: []): string }>;

    implementation: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class CDelegateInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CDelegateInterface;
  attach(addressOrName: string): CDelegateInterface;
  deployed(): Promise<CDelegateInterface>;

  on(event: EventFilter | string, listener: Listener): CDelegateInterface;
  once(event: EventFilter | string, listener: Listener): CDelegateInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CDelegateInterface;
  removeAllListeners(eventName: EventFilter | string): CDelegateInterface;
  removeListener(eventName: any, listener: Listener): CDelegateInterface;

  interface: CDelegateInterfaceInterface;

  functions: {
    _becomeImplementation(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    _resignImplementation(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    implementation(): Promise<string>;
  };

  _becomeImplementation(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  _resignImplementation(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  implementation(): Promise<string>;

  filters: {};

  estimate: {
    _becomeImplementation(data: Arrayish): Promise<BigNumber>;

    _resignImplementation(): Promise<BigNumber>;

    implementation(): Promise<BigNumber>;
  };
}
