/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PatronProxyFactoryInterface extends Interface {
  functions: {
    deployProxy: TypedFunctionDescription<{
      encode([_salt]: [BigNumberish]): string;
    }>;
  };

  events: {
    Deployed: TypedEventDescription<{
      encodeTopics([addr, salt]: [null, null]): string[];
    }>;
  };
}

export class PatronProxyFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PatronProxyFactory;
  attach(addressOrName: string): PatronProxyFactory;
  deployed(): Promise<PatronProxyFactory>;

  on(event: EventFilter | string, listener: Listener): PatronProxyFactory;
  once(event: EventFilter | string, listener: Listener): PatronProxyFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PatronProxyFactory;
  removeAllListeners(eventName: EventFilter | string): PatronProxyFactory;
  removeListener(eventName: any, listener: Listener): PatronProxyFactory;

  interface: PatronProxyFactoryInterface;

  functions: {
    deployProxy(
      _salt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  deployProxy(
    _salt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Deployed(addr: null, salt: null): EventFilter;
  };

  estimate: {
    deployProxy(_salt: BigNumberish): Promise<BigNumber>;
  };
}
