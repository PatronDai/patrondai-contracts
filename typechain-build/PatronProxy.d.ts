/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PatronProxyInterface extends Interface {
  functions: {
    calculateMessageHash: TypedFunctionDescription<{
      encode([from, to, value, data, currentNonce]: [
        string,
        string,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    forwardTx: TypedFunctionDescription<{
      encode([to, value, data, _v, _r, _s]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    Initialized: TypedEventDescription<{
      encodeTopics([success]: [null]): string[];
    }>;
  };
}

export class PatronProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PatronProxy;
  attach(addressOrName: string): PatronProxy;
  deployed(): Promise<PatronProxy>;

  on(event: EventFilter | string, listener: Listener): PatronProxy;
  once(event: EventFilter | string, listener: Listener): PatronProxy;
  addListener(eventName: EventFilter | string, listener: Listener): PatronProxy;
  removeAllListeners(eventName: EventFilter | string): PatronProxy;
  removeListener(eventName: any, listener: Listener): PatronProxy;

  interface: PatronProxyInterface;

  functions: {
    calculateMessageHash(
      from: string,
      to: string,
      value: BigNumberish,
      data: Arrayish,
      currentNonce: BigNumberish
    ): Promise<string>;

    forwardTx(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      _v: BigNumberish,
      _r: Arrayish,
      _s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  calculateMessageHash(
    from: string,
    to: string,
    value: BigNumberish,
    data: Arrayish,
    currentNonce: BigNumberish
  ): Promise<string>;

  forwardTx(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    _v: BigNumberish,
    _r: Arrayish,
    _s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Initialized(success: null): EventFilter;
  };

  estimate: {
    calculateMessageHash(
      from: string,
      to: string,
      value: BigNumberish,
      data: Arrayish,
      currentNonce: BigNumberish
    ): Promise<BigNumber>;

    forwardTx(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      _v: BigNumberish,
      _r: Arrayish,
      _s: Arrayish
    ): Promise<BigNumber>;
  };
}
