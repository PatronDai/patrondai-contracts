/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PatronDaiCampaignsRegistryInterface extends Interface {
  functions: {
    getCampaign: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    getCampaignsCount: TypedFunctionDescription<{ encode([]: []): string }>;

    initialize: TypedFunctionDescription<{
      encode([_daiAddress, _cDaiAddress]: [string, string]): string;
    }>;

    registerCampaign: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    CampaignRegistration: TypedEventDescription<{
      encodeTopics([campaignId, campaignContract]: [null, null]): string[];
    }>;
  };
}

export class PatronDaiCampaignsRegistry extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): PatronDaiCampaignsRegistry;
  attach(addressOrName: string): PatronDaiCampaignsRegistry;
  deployed(): Promise<PatronDaiCampaignsRegistry>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): PatronDaiCampaignsRegistry;
  once(
    event: EventFilter | string,
    listener: Listener
  ): PatronDaiCampaignsRegistry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PatronDaiCampaignsRegistry;
  removeAllListeners(
    eventName: EventFilter | string
  ): PatronDaiCampaignsRegistry;
  removeListener(
    eventName: any,
    listener: Listener
  ): PatronDaiCampaignsRegistry;

  interface: PatronDaiCampaignsRegistryInterface;

  functions: {
    getCampaign(id: BigNumberish): Promise<string>;

    getCampaignsCount(): Promise<BigNumber>;

    initialize(
      _daiAddress: string,
      _cDaiAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    registerCampaign(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getCampaign(id: BigNumberish): Promise<string>;

  getCampaignsCount(): Promise<BigNumber>;

  initialize(
    _daiAddress: string,
    _cDaiAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  registerCampaign(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    CampaignRegistration(campaignId: null, campaignContract: null): EventFilter;
  };

  estimate: {
    getCampaign(id: BigNumberish): Promise<BigNumber>;

    getCampaignsCount(): Promise<BigNumber>;

    initialize(_daiAddress: string, _cDaiAddress: string): Promise<BigNumber>;

    registerCampaign(): Promise<BigNumber>;
  };
}
